= AASM - Ruby state machines

This package contains AASM, a library for adding finite state machines to Ruby classes.

AASM started as the acts_as_state_machine plugin but has evolved into a more generic library that no longer targets only ActiveRecord models.

AASM has the following features:

* States
* Machines
* Events
* Transitions

== New Callbacks

The only changes I've made are creating more callbacks with slightly more obvious semantics ;).

The callback chain & order on a successful event looks like:

  oldstate:exit
  transition:on_transition
  newstate:enter
  oldstate:before_exit
  newstate:before_enter
  event:before
  __update state__
  oldstate:after_exit
  oldstate:after_enter
  event:after
  event:success
  obj:aasm_event_fired

Note that the old callbacks haven't been removed and still have their same semantics.  All of this behavior was added without removing any old behavior.

== Download

The latest AASM can currently be pulled from the git repository on github.

* http://github.com/dunedain289/aasm/tree/master


== Installation

=== From GitHub hosted gems

  % sudo gem sources -a http://gems.github.com # (you only need to do this once)
  % sudo gem install dunedain289-aasm

=== Building your own gems

  % rake gem
  % sudo gem install pkg/aasm-2.1.gem


== Simple Example

Here's a quick example highlighting some of the features.

  class Conversation
    include AASM

    aasm_initial_state :unread

    aasm_state :unread
    aasm_state :read
    aasm_state :closed


    aasm_event :view do
      transitions :to => :read, :from => [:unread]
    end

    aasm_event :close do
      transitions :to => :closed, :from => [:read, :unread]
    end
  end

= Other Stuff

Author::  Scott Barron <scott at elitists dot net>
License:: Original code Copyright 2006, 2007, 2008 by Scott Barron.
          New changes Copyright 2009 by Scott Petersen.
          Released under an MIT-style license.  See the LICENSE  file
          included in the distribution.

== Warranty

This software is provided "as is" and without any express or
implied warranties, including, without limitation, the implied
warranties of merchantibility and fitness for a particular
purpose.
